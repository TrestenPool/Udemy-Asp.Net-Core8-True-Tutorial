Configuration Settings
  - they are constant key/value pairs that are set at a common location and 
  can be read from anywhere in the same application
  - ex. Connection strings, api keys/secrets

appsettings.json
  - the file that is be able to be read from any of the files in the program

Reading from appsettings.json in the Program.cs
  Getting Key/Value from appsettings.json
    string keyvalue = app.Configuration["MyKey"] ?? "no MyKey key present";
    string? othervalue = app.Configuration.GetValue<string>("othervalue","no key called othervalue");
  

Reading from appsettings.json in the controller
  - IConfiguration has access to the appsettings.json file
  
  public class HomeController : Controller{
    private readonly IConfiguration _configuration;

    public HomeController(IConfiguration configuration){
      _configuration = configuration;
    }
    
    ViewData["result"] = _configuration.GetValue<string>("MyKey","no MyKey supplied in appsettings.json");
    ViewData["result"] = _configuration["MyKey"];
    ViewData["result"] = _configuration["MyKey:nestedkey"];
  

Get hierarchial data in appsettings.json
  == Example Data ==
  "userdata":
  {
    "username": "john@gmail.com",
    "password": "password123!"
  }

  // this will get the hierarchial data
  _configuration["something:mydata"]

  // using GetSection()
  var userdata = _configuration.GetSection("userdata")
  var username = userdata["username"]
  var password = userdata["password"]




Options pattern
  - create a model class with the particular keys you want from appsettings.json
  




  