Service Lifetimes
  - Transient
    - created each time they are injected
    - disposed at the end of the browser request (scope)
  
  - Scoped
    - created once per scope (browser request)
    - disposed at the end of the scope (browser request)
  
  - Singleton
    - created for the first time when they are requested
    - Disposed at app shutdown
  


DI through method in controller
  - Only this route will get the object
  - Not really used
  - Used when only one method in the controller needs access to the object
  [Route("home")]
  public IActionResult Index([FromServices] ICitiesService citiesService){
    List<string> cities = citiesService.GetCities();
    return View(cities);
  }



Creating a child scope
  - This is creating a child scope
  - The object will get removed after the end of the code block because it will call dispose on the CitiesService Service object
  - we don't have to call Dispose directly because we are using the "using" keyword

  using(var scope = _serviceScopeFactory.CreateScope()){

    var citiesService4 = scope.ServiceProvider.GetService<ICitiesService>();
    ViewData["Guid4"] = citiesService4?.ServiceInstanceId;

  } // end of scope; it calls CitiesService.Dispose()


@inject in views
  - Used for injecting object into views
  - Most of the time the object will get passed by the controller but this is used when you don't want to do that and the object is 
  .. specific to a view
  @inject ICitiesService citiesServiceList


Best practices for Dependency injection
  Global State in services
    - Avoid using static classes to store some data globally for all users / all requests
    - use singleton services for simple scenarios 
    - ConcurrentDictionary instead of Dictionary, which better handles concurrent access via multiple threads
    - Alternatively, prefer to use Distrubuted Cache / Redis for any signifcant amount of data or complex scenarios

  Request state in services
    - Don't use scoped services to share data among services within the same request, because they are not thread safe
    - Use HttpContext.items instead
  
  Service Locator Pattern
    - Avoid using service locator pattern, without creating a child scope, because it will
     be harder to know about dependencies of a class
    - For example, don't invoke GetService() in the default scope that is created
      when a new request is received
    - use the IServiceScopeFactory.ServiceProvider.GetService() within a child scope

  Captive dependencies
    - Don't inject scoped or transient services in singleton services
    - Because, in this case, transient or scoped services act as singleton services, inside of a Singleton service